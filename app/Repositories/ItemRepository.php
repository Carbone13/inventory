<?php
namespace App\Repositories; use App\Models\Item; use App\Models\ItemSalesHistory; use App\Models\ItemPurchaseHistory; use Yajra\DataTables\Facades\DataTables; class ItemRepository extends BaseRepository { protected $model, $salesModel, $purchaseModel; public function __construct() { $this->model = new Item(); $this->salesModel = new ItemSalesHistory(); $this->purchaseModel = new ItemPurchaseHistory(); } protected function saveModel($sp12db67, $sp68be9c) { foreach ($sp68be9c as $sp22c61b => $sp75a6c8) { $sp12db67->{$sp22c61b} = $sp75a6c8; } $sp12db67->save(); return $sp12db67; } public function store($sp68be9c) { $sp12db67 = $this->saveModel(new $this->model(), $sp68be9c); return $sp12db67; } public function update($sp12db67, $sp68be9c) { $sp12db67 = $this->saveModel($sp12db67, $sp68be9c); return $sp12db67; } public function findById($sp2bf607) { return $this->model->where('id', $sp2bf607)->first(); } public function findByCode($sp2cc1d5) { return $this->model->where('item_code', $sp2cc1d5)->first(); } public function findAll() { return $this->model->orderBy('item_name', 'asc')->get(); } public function findReportPurchase($spe1dc49, $sp32ff68, $spaa89da) { $sp12db67 = $this->purchaseModel; if (!is_null($spaa89da)) { $sp12db67 = $sp12db67->where('item_id', $spaa89da->id); } $sp12db67 = $sp12db67->whereMonth('created_at', $spe1dc49)->whereYear('created_at', $sp32ff68)->get(); return $sp12db67; } public function findReportSales($spe1dc49, $sp32ff68, $spaa89da) { $sp12db67 = $this->salesModel; if (!is_null($spaa89da)) { $sp12db67 = $sp12db67->where('item_id', $spaa89da->id); } $sp12db67 = $sp12db67->whereMonth('created_at', $spe1dc49)->whereYear('created_at', $sp32ff68)->get(); return $sp12db67; } public function checkCode($sp2cc1d5, $spe374d9 = null) { $sp12db67 = $this->model->where('item_code', $sp2cc1d5); if (!is_null($spe374d9)) { $sp12db67 = $sp12db67->where('id', '!=', $spe374d9); } return !$sp12db67->first(); } public function getList($spe81ede = '', $sp0757f9 = '') { if ($spe81ede == '' && $sp0757f9 == '') { $spe88479 = $this->model->query(); } else { $spe88479 = $this->model; if ($spe81ede != '') { $spe88479 = $spe88479->whereDate('created_at', '>=', trim($spe81ede)); } if ($sp0757f9 != '') { $spe88479 = $spe88479->whereDate('created_at', '<=', trim($sp0757f9)); } } $sp68be9c = DataTables::eloquent($spe88479)->addColumn('action', function ($sp12db67) { return view('item.action')->with('model', $sp12db67); })->make(true); return $sp68be9c; } public function addPurchaseHistory($sp68be9c, $sp1c4881, $sp9049a6) { $sp12db67 = new $this->purchaseModel(); $sp12db67->item_id = $sp1c4881->id; $sp12db67->purchase_id = $sp9049a6->id; $sp12db67->invoice_id = $sp9049a6->invoice_id; $sp12db67->quantity = $sp68be9c['quantity']; $sp12db67->unit_price = $sp68be9c['price']; $sp12db67->price = $sp68be9c['price'] * $sp68be9c['quantity']; $sp12db67->discount = $sp68be9c['discount']; $sp12db67->total = $sp68be9c['total']; $sp12db67->save(); return $sp12db67; } public function addSalesHistory($sp68be9c, $sp1c4881, $sp4f5893) { $sp12db67 = new $this->salesModel(); $sp12db67->item_id = $sp1c4881->id; $sp12db67->sales_id = $sp4f5893->id; $sp12db67->invoice_id = $sp4f5893->invoice_id; $sp12db67->quantity = $sp68be9c['quantity']; $sp12db67->unit_price = $sp68be9c['price']; $sp12db67->price = $sp68be9c['price'] * $sp68be9c['quantity']; $sp12db67->discount = $sp68be9c['discount']; $sp12db67->total = $sp68be9c['total']; $sp12db67->save(); return $sp12db67; } }