<?php
namespace App\Repositories; use App\Models\Receivable; use App\Models\ReceivableInvoice; use Yajra\DataTables\Facades\DataTables; class ReceivableRepository extends BaseRepository { protected $model, $invoiceModel; public function __construct() { $this->model = new Receivable(); $this->invoiceModel = new ReceivableInvoice(); } protected function saveModel($sp12db67, $sp68be9c) { foreach ($sp68be9c as $sp22c61b => $sp75a6c8) { $sp12db67->{$sp22c61b} = $sp75a6c8; } $sp12db67->save(); return $sp12db67; } public function store($sp68be9c) { $sp12db67 = $this->saveModel(new $this->model(), $sp68be9c); return $sp12db67; } public function storeInvoice($sp68be9c) { $sp12db67 = $this->saveModel(new $this->invoiceModel(), $sp68be9c); return $sp12db67; } public function update($sp12db67, $sp68be9c) { $sp12db67 = $this->saveModel($sp12db67, $sp68be9c); return $sp12db67; } public function findInvoiceById($sp2bf607) { return $this->invoiceModel->where('id', $sp2bf607)->first(); } public function findById($sp2bf607) { return $this->model->where('id', $sp2bf607)->first(); } public function findDue($sp1114f5 = 7) { $spd78492 = \Carbon\Carbon::today()->addDays($sp1114f5); return $this->model->where('is_complete', false)->where('due_date', '<=', $spd78492)->count(); } public function findReportClient($spe1dc49, $sp32ff68, $spfd3b5a) { $sp12db67 = $this->model; if (!is_null($spfd3b5a)) { $sp12db67 = $sp12db67->where('client_id', $spfd3b5a->id); } $sp12db67 = $sp12db67->whereMonth('created_at', $spe1dc49)->whereYear('created_at', $sp32ff68)->get(); return $sp12db67; } public function getList($spe81ede = '', $sp0757f9 = '') { if ($spe81ede == '' && $sp0757f9 == '') { $spe88479 = $this->model->query(); } else { $spe88479 = $this->model; if ($spe81ede != '') { $spe88479 = $spe88479->whereDate('created_at', '>=', trim($spe81ede)); } if ($sp0757f9 != '') { $spe88479 = $spe88479->whereDate('created_at', '<=', trim($sp0757f9)); } } $sp68be9c = DataTables::eloquent($spe88479)->addColumn('action', function ($sp12db67) { return view('receivable.action')->with('model', $sp12db67); })->editColumn('amount', function ($sp12db67) { return number_format($sp12db67->amount, 0); })->editColumn('amount_left', function ($sp12db67) { return number_format($sp12db67->amount_left, 0); })->editColumn('client_name', function ($sp12db67) { if ($spfd3b5a = $sp12db67->client) { return '<a href="' . route('client.edit', array('id' => $spfd3b5a->id)) . '" target="_blank">' . $spfd3b5a->client_name . '</a>'; } else { return '<label class="label label-danger">TIDAK ADA DATA KLIEN</label>'; } })->editColumn('is_complete', function ($sp12db67) { if ($sp12db67->is_complete) { return '<span class="badge badge-success">LUNAS</span>'; } else { return '<span class="badge badge-danger">BELUM LUNAS</span>'; } })->rawColumns(array('action', 'client_name', 'is_complete'))->make(true); return $sp68be9c; } public function getInvoiceList($spe81ede = '', $sp0757f9 = '') { if ($spe81ede == '' && $sp0757f9 == '') { $spe88479 = $this->invoiceModel->query(); } else { $spe88479 = $this->invoiceModel; if ($spe81ede != '') { $spe88479 = $spe88479->whereDate('created_at', '>=', trim($spe81ede)); } if ($sp0757f9 != '') { $spe88479 = $spe88479->whereDate('created_at', '<=', trim($sp0757f9)); } } $sp68be9c = DataTables::eloquent($spe88479)->addColumn('action', function ($sp12db67) { return view('receivable.invoiceAction')->with('model', $sp12db67); })->editColumn('amount', function ($sp12db67) { return number_format($sp12db67->amount, 0); })->editColumn('amount_left', function ($sp12db67) { return number_format($sp12db67->amount_left, 0); })->editColumn('client_name', function ($sp12db67) { if ($spfd3b5a = $sp12db67->client) { return '<a href="' . route('client.edit', array('id' => $spfd3b5a->id)) . '" target="_blank">' . $spfd3b5a->client_name . '</a>'; } else { return '<label class="label label-danger">TIDAK ADA DATA client</label>'; } })->rawColumns(array('action', 'client_name'))->make(true); return $sp68be9c; } public function createReceivable($sp68be9c) { $sp93a5a3 = $sp68be9c['amount']; if ($sp68be9c['is_client']) { $spa7c286 = $this->model->where('is_complete', 0)->where('client_id', $sp68be9c['client_id'])->orderBy('created_at', 'asc')->get(); $sp5767a1 = array(); if (count($spa7c286) > 0) { foreach ($spa7c286 as $sp6a066a) { if ($sp93a5a3 > $sp6a066a->amount_left) { array_push($sp5767a1, array('receivable_id' => $sp6a066a->id, 'invoice_id' => $sp6a066a->invoice_id, 'amount' => $sp6a066a->amount_left)); $sp93a5a3 -= $sp6a066a->amount_left; $sp6a066a->amount_left = 0; $sp6a066a->is_complete = true; $sp6a066a->save(); } else { array_push($sp5767a1, array('receivable_id' => $sp6a066a->id, 'invoice_id' => $sp6a066a->invoice_id, 'amount' => $sp93a5a3)); $sp6a066a->amount_left -= $sp93a5a3; if ($sp6a066a->amount_left < 0) { $sp6a066a->amount_left = 0; } $sp93a5a3 = 0; $sp6a066a->save(); break; } } } $sp3e187e = $this->storeInvoice(array('created_by' => $sp68be9c['created_by'], 'client_id' => $sp68be9c['client_id'], 'receivable_infos' => json_encode($sp5767a1), 'other_title' => $sp68be9c['other_title'], 'other_notes' => $sp68be9c['other_notes'], 'amount' => $sp68be9c['amount'], 'amount_left' => $sp93a5a3, 'is_client' => true, 'paid_date' => $sp68be9c['paid_date'])); } else { $sp3e187e = $this->storeInvoice(array('created_by' => $sp68be9c['created_by'], 'client_id' => 0, 'receivable_infos' => null, 'other_title' => $sp68be9c['other_title'], 'other_notes' => $sp68be9c['other_notes'], 'amount' => $sp68be9c['amount'], 'amount_left' => $sp68be9c['amount'], 'is_client' => false, 'paid_date' => $sp68be9c['paid_date'])); } return $sp3e187e; } }