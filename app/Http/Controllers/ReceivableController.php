<?php
namespace App\Http\Controllers; use Illuminate\Http\Request; use App\Repositories\ReceivableRepository; use App\Repositories\ClientRepository; class ReceivableController extends Controller { protected $ReceivableRepository; public function __construct(ReceivableRepository $spa10d20) { parent::__construct(); $this->ReceivableRepository = $spa10d20; $this->middleware('admin'); $this->middleware('admin.sales'); } public function getList() { return $this->ReceivableRepository->getList(\Input::get('date_start'), \Input::get('date_end')); } public function getInvoiceList() { return $this->ReceivableRepository->getInvoiceList(\Input::get('date_start'), \Input::get('date_end')); } public function getDetail($sp2bf607) { if (!($sp12db67 = $this->ReceivableRepository->findById(trim($sp2bf607)))) { return 'Data piutang tidak ditemukan.'; } else { return view('receivable.detail')->with('model', $sp12db67); } } public function getInvoiceDetail($sp2bf607) { if (!($sp12db67 = $this->ReceivableRepository->findInvoiceById(trim($sp2bf607)))) { return 'Data pelunasan piutang tidak ditemukan.'; } else { return view('receivable.invoiceDetail')->with('model', $sp12db67); } } public function createReceivable() { $sp68be9c = \Input::get('data'); if (isset($sp68be9c['is_client'])) { $sp50bb63 = new ClientRepository(); if (!$sp50bb63->findById(trim($sp68be9c['client_id']))) { return \Response::json(array('type' => 'error', 'message' => 'Data klien tidak ditemukan.')); } $sp68be9c['is_client'] = true; } else { $sp68be9c['is_client'] = false; } $sp7612e0 = \Sentinel::getUser(); $sp68be9c['created_by'] = $sp7612e0->email; try { $sp12db67 = $this->ReceivableRepository->createReceivable($sp68be9c); } catch (\Exception $sp118c46) { return \Response::json(array('type' => 'error', 'message' => $sp118c46->getMessage())); } return \Response::json(array('type' => 'success', 'message' => 'Data piutang telah ditambah.')); } public function editReceivable($sp2bf607) { return false; } public function updateReceivable($sp2bf607) { return false; } public function deleteReceivable($sp2bf607) { if (!($sp12db67 = $this->ReceivableRepository->findById(trim($sp2bf607)))) { return \Response::json(array('type' => 'error', 'message' => 'Data piutang #{$id} tidak ditemukan.')); } $sp12db67->delete(); return \Response::json(array('type' => 'success', 'message' => 'Data piutang telah berhasil dihapus.')); } public function reportClient() { if (!\Input::has('month') || !\Input::has('year')) { return 'Data bulan dan tahun tidak ada.'; } $spfd3b5a = null; if (\Input::get('client_id') != 0) { $sp2d76c7 = new ClientRepository(); if (!($spfd3b5a = $sp2d76c7->findById(trim(\Input::get('client_id'))))) { return 'Data klien tidak ditemukan.'; } } $sp701576 = $this->ReceivableRepository->findReportClient(trim(\Input::get('month')), trim(\Input::get('year')), $spfd3b5a); return view('receivable.reportDetail')->with('models', $sp701576); } }